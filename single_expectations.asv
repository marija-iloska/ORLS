function [E_add, E_rmv] = single_expectations(y, H, t0, T, idx1, var_y, theta)


% Initialize
K = length(H(1,:));
idx0 = setdiff(1:K, idx1);
p = length(idx1);
pj = K - p;

% Sort H
H = H(:, [idx1, idx0]);
theta = theta(idx1);

% Get true estimates
Dp = inv(H(1:t0, 1:p)'*H(1:t0, 1:p));
theta_p = Dp*H(1:t0, 1:p)'*y(1:t0);



for t = t0+1:T

    
    % SINGLE TIME ===================================================
    % Addition  D(p+1, t-1)
    for j = 1:pj
        % It updates DIM at t-1
        [~, Dpp, ~,~] = ols_updates(y, H, p, j, t, Dp, theta_p);

        % D(p+1, t-1)
        b_add = - Dpp(1:end-1,end)/Dpp(end, end);
        Q_add = H(t, p+j) - H(t, 1:p)*b_add;

        % Expectation E(p+1) - E(p)
        E_add(t,j) = Q_add^2*var_y;

    end

    % Removal  D(p, t-1)
    for j = 1:p

        % D(p+1, t-1)
        b_rmv = - Dp(1:end-1,end)/Dp(end, end);
        Q_rmv = H(t, j) - H(t, setdiff(1:p,j))*b_rmv;

        % Expectation E(p+1) - E(p)
        E_rmv(t,j) = Q_rmv^2*var_y + theta(j)^2 - 2*var_y*H(t, 1:p)*Dp(:,end);

    end


    % BATCH TIME ===================================================
    % Add
    for j = 1:pj

        % TERM 1
        T1 = H(1:t-1, p+j)'*H(1:t-1, 1:p)*Dp*H(t,1:p)' - H(t, p+j);

        P = eye(t-1) - H(1:t-1, 1:p)*Dp*H(1:t-1,1:p)';
        T2 = H(1:t-1, p+j)'*P*H(1:t-1, p+j);


        % Expectation E(p+1) - E(p)
        E_add(t,j) = T1^2 - T2;
    end

    % Removal
    for j = 1:p

        % D(p+1, t-1)
        b_rmv =  Dp(1:end-1,end)/Dp(end, end);
        Q_rmv = H(1:t, j) - H(1:t, setdiff(1:p,j))*b_rmv;

        % Expectation E(p+1) - E(p)
        E_rmv(t,j) = 

    end




    % Compute theta_(k+1, t-1), check Dk indices
    [theta_p, Dp, ~] = time_update(y, H(1:t, 1:p), t, theta_p, var_y, Dp, 1);



end


end